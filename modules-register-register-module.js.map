{"version":3,"sources":["webpack:///./src/app/main/modules/register/register-routing.module.ts","webpack:///./src/app/main/modules/register/register.component.html","webpack:///./src/app/main/modules/register/register.component.scss","webpack:///./src/app/main/modules/register/register.component.ts","webpack:///./src/app/main/modules/register/register.module.ts"],"names":[],"mappings":"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","file":"modules-register-register-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {RegisterComponent} from './register.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RegisterRoutingModule { }\n","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"jumbotron\\\" style=\\\"margin-bottom: 1rem;\\\">\\n    <div class=\\\"login-form mx-auto d-block w-100\\\">\\n      <div class=\\\"page-header text-center\\\">\\n        <h1>Sign Up!</h1>\\n      </div>\\n      <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"submit(form.value)\\\" class=\\\"form-validate\\\">\\n\\n\\n        <div class=\\\"form-row\\\">\\n          <div class=\\\"col-md-6 mb-3\\\">\\n\\n            <!--Name-->\\n            <div class=\\\"form-group\\\">\\n              <div class=\\\"control-label\\\">\\n                <label id=\\\"firstname-lbl\\\" for=\\\"name\\\" class=\\\"required\\\">\\n                  Name\\n                  <span class=\\\"star\\\">Â *</span></label>\\n              </div>\\n              <div class=\\\"controls\\\">\\n                <input class=\\\"form-control\\\" id=\\\"name\\\" type=\\\"text\\\" formControlName=\\\"name\\\" #registerFormName\\n                       [ngClass]=\\\"{'is-invalid': (form.get('name').touched || form.get('name').dirty) &&\\n                   !form.get('name').valid, 'is-valid': form.get('name').valid }\\\"\\n                />\\n                <span class=\\\"invalid-feedback\\\">\\n              <span *ngIf=\\\"(form.get('name').errors?.required &&\\n              form.get('name').touched)\\\">\\n                The name is required!\\n              </span>\\n              <span *ngIf=\\\"(form.get('name').errors?.minlength &&\\n               form.get('name').touched)\\\">\\n                Too short!\\n              </span>\\n              <span *ngIf=\\\"(form.get('name').errors?.maxlength &&\\n               form.get('name').touched)\\\">\\n                Too long!\\n              </span>\\n            </span>\\n              </div>\\n            </div>\\n\\n          </div>\\n\\n          <div class=\\\"col-md-6 mb-3\\\">\\n\\n            <!--Surname-->\\n            <div class=\\\"form-group\\\">\\n              <div class=\\\"control-label\\\">\\n                <label id=\\\"surname-lbl\\\" for=\\\"surname\\\" class=\\\"required\\\">\\n                  Surname\\n                  <span class=\\\"star\\\">Â *</span></label>\\n              </div>\\n              <div class=\\\"controls\\\">\\n                <input class=\\\"form-control\\\" id=\\\"surname\\\" type=\\\"text\\\" formControlName=\\\"surname\\\" #registerFormSurname\\n                       [ngClass]=\\\"{'is-invalid': (form.get('surname').touched || form.get('surname').dirty) &&\\n                   !form.get('surname').valid, 'is-valid': form.get('surname').valid }\\\"/>\\n                <span class=\\\"invalid-feedback\\\">\\n              <span *ngIf=\\\"(form.get('surname').errors?.required && form.get('surname').touched)\\\">\\n                The surname is required!\\n              </span>\\n              <span *ngIf=\\\"(form.get('surname').errors?.minlength && form.get('surname').touched)\\\">\\n                Too short!\\n              </span>\\n             <span *ngIf=\\\"(form.get('surname').errors?.maxlength && form.get('surname').touched)\\\">\\n                Too long!\\n              </span>\\n            </span>\\n              </div>\\n            </div>\\n\\n          </div>\\n\\n          <div class=\\\"col-md-4 mb-3\\\">\\n\\n          </div>\\n        </div>\\n\\n\\n        <div class=\\\"form-row\\\">\\n\\n          <div class=\\\"col-md-4 mb-3\\\">\\n            <!--Username-->\\n            <div class=\\\"form-group\\\">\\n              <div class=\\\"control-label\\\">\\n                <label id=\\\"username-lbl\\\" for=\\\"username\\\" class=\\\"required\\\">\\n                  Username\\n                  <span class=\\\"star\\\">Â *</span></label>\\n              </div>\\n              <div class=\\\"controls\\\">\\n                <input class=\\\"form-control\\\" id=\\\"username\\\" type=\\\"text\\\" formControlName=\\\"username\\\" #registerFormUsername\\n                       [ngClass]=\\\"{'is-invalid': (form.get('username').touched || form.get('username').dirty) &&\\n                                         !form.get('username').valid, 'is-valid': form.get('username').valid }\\\"/>\\n                <div *ngIf=\\\"form.get('username').status === 'PENDING'\\\">\\n                  <fa name=\\\"cog\\\" animation=\\\"spin\\\"></fa>\\n                  Checking...\\n                </div>\\n                <span class=\\\"invalid-feedback\\\">\\n              <span *ngIf=\\\"form.get('username').errors && form.get('username').errors.usernameTaken\\\">\\n                ðŸ˜¢ Oh noes, this username is already taken!\\n              </span>\\n              <span *ngIf=\\\"(form.get('username').errors?.required &&\\n              form.get('username').touched)\\\">\\n                The username is required!\\n              </span>\\n              <span *ngIf=\\\"(form.get('username').errors?.minlength &&\\n              form.get('username').touched)\\\">\\n                The short!\\n              </span>\\n              <span *ngIf=\\\"(form.get('username').errors?.maxlength &&\\n               form.get('username').touched)\\\">\\n                Too long!\\n              </span>\\n\\n            </span>\\n\\n              </div>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"col-md-8 mb-3\\\">\\n            <!--Email-->\\n            <div class=\\\"form-group\\\">\\n              <div class=\\\"control-label\\\">\\n                <label id=\\\"email-lbl\\\" for=\\\"email\\\" class=\\\"required\\\">Email<span class=\\\"star\\\">Â *</span></label>\\n              </div>\\n              <div class=\\\"controls\\\">\\n                <input class=\\\"form-control\\\"\\n                       id=\\\"email\\\"\\n                       type=\\\"email\\\"\\n                       formControlName=\\\"email\\\"\\n                       #registerFormEmail\\n                       [ngClass]=\\\"{'is-invalid': (form.get('email').touched || form.get('email').dirty) &&\\n                                         !form.get('email').valid, 'is-valid': form.get('email').valid }\\\"/>\\n                <div *ngIf=\\\"form.get('email').status === 'PENDING'\\\">\\n                  <fa name=\\\"cog\\\" animation=\\\"spin\\\"></fa>\\n                  Checking...\\n                </div>\\n                <span class=\\\"invalid-feedback\\\">\\n              <div *ngIf=\\\"form.get('email').status === 'VALID'\\\">\\n                ðŸ˜º Email is available!\\n              </div>\\n\\n              <span *ngIf=\\\"form.get('email').errors && form.get('email').errors.emailTaken\\\">\\n                ðŸ˜¢ Oh noes, this email is already taken!\\n              </span>\\n\\n              <span *ngIf=\\\"(form.get('email').errors?.email && form.get('email').touched)\\\">\\n                The email format is wrong!\\n              </span>\\n            </span>\\n\\n              </div>\\n            </div>\\n\\n          </div>\\n\\n        </div>\\n\\n\\n        <!--Password Group-->\\n        <div formGroupName=\\\"passwordGroup\\\">\\n\\n          <div class=\\\"form-row\\\">\\n\\n            <div class=\\\"col-md-6 mb-3\\\">\\n              <!--Password-->\\n              <div class=\\\"form-group\\\">\\n                <div class=\\\"controls\\\">\\n                  <div class=\\\"control-label\\\">\\n                    <label for=\\\"password\\\" class=\\\"required\\\">Password<span class=\\\"star\\\">Â *</span></label>\\n                  </div>\\n                  <input class=\\\"form-control\\\" id=\\\"password\\\" type=\\\"password\\\" formControlName=\\\"password\\\"\\n                         [ngClass]=\\\"{'is-invalid': (form.get('passwordGroup').get('password').touched ||\\n                     form.get('passwordGroup').get('password').dirty) &&\\n                     !form.get('passwordGroup').get('password').valid,\\n                     'is-valid': form.get('passwordGroup').get('password').valid }\\\"/>\\n                  <span class=\\\"invalid-feedback\\\">\\n               <span\\n                 *ngIf=\\\"(form.get('passwordGroup').get('password').errors?.required &&\\n                 form.get('passwordGroup').get('password').touched)\\\">\\n                 required\\n               </span>\\n               <span\\n                 *ngIf=\\\"(form.get('passwordGroup').get('password').errors?.minlength &&\\n                  form.get('passwordGroup').get('password').touched)\\\">\\n                   Too short!\\n               </span>\\n              <span\\n                *ngIf=\\\"(form.get('passwordGroup').get('password').errors?.maxlength &&\\n                form.get('passwordGroup').get('password').touched)\\\">\\n                   Too long!\\n               </span>\\n              </span>\\n                </div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"col-md-6 mb-3\\\">\\n\\n              <!--Confirm password-->\\n              <div class=\\\"form-group\\\">\\n                <div class=\\\"controls\\\">\\n                  <div class=\\\"control-label\\\">\\n                    <label for=\\\"confirmPassword\\\" class=\\\"required\\\">Password Confirmation<span\\n                      class=\\\"star\\\">Â *</span></label>\\n                  </div>\\n                  <input class=\\\"form-control\\\" id=\\\"confirmPassword\\\" type=\\\"password\\\" formControlName=\\\"confirmPassword\\\"\\n                         [ngClass]=\\\"{'is-invalid': (\\n                     form.get('passwordGroup').get('confirmPassword').touched &&\\n                     form.get('passwordGroup').hasError('notSame')\\n                     ), 'is-valid': form.get('passwordGroup').get('confirmPassword').valid }\\\"/>\\n                  <span class=\\\"invalid-feedback\\\">\\n                 <span\\n                   *ngIf=\\\"(form.get('passwordGroup').get('confirmPassword').errors?.required &&\\n                   form.get('passwordGroup').get('confirmPassword').touched)\\\">\\n                 Enter a password.\\n               </span>\\n                <span\\n                  *ngIf=\\\"(form.get('passwordGroup').hasError('notSame') &&\\n                   form.get('passwordGroup').get('confirmPassword').touched)\\\">\\n                   Passwords don't match!\\n                 </span>\\n              </span>\\n                </div>\\n              </div>\\n\\n            </div>\\n\\n          </div>\\n\\n\\n        </div>\\n\\n\\n        <!--Submit-->\\n        <div class=\\\"d-flex justify-content-between\\\">\\n          <div class=\\\"form-check form-group d-flex justify-content-end\\\">\\n            <label class=\\\"form-check-label\\\">\\n              <input formControlName=\\\"remember\\\" type=\\\"checkbox\\\" class=\\\"form-check-input\\\">Remember me!</label>\\n          </div>\\n          <div class=\\\"form-group d-flex justify-content-start\\\">\\n            <div class=\\\"controls\\\">\\n              <button\\n                [disabled]=\\\"!form.valid || progress || form.untouched\\\"\\n                type=\\\"submit\\\"\\n                class=\\\"btn btn-primary\\\">\\n                Sign Up\\n                <fa *ngIf=\\\"progress\\\" name=\\\"cog\\\" animation=\\\"spin\\\"></fa>\\n                <fa *ngIf=\\\"!progress\\\" name=\\\"sign-in\\\"></fa>\\n              </button>\\n\\n\\n              <button\\n                (click)=\\\"form.reset()\\\"\\n                [disabled]=\\\"form.pristine\\\"\\n                type=\\\"button\\\"\\n                class=\\\"btn btn-warning\\\">\\n                Reset\\n              </button>\\n            </div>\\n          </div>\\n        </div>\\n\\n\\n      </form>\\n      <div class=\\\"text-center\\\">\\n        <p>Already have an account? &nbsp;<a routerLink=\\\"/login\\\">Sign In!</a></p>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21haW4vbW9kdWxlcy9yZWdpc3Rlci9yZWdpc3Rlci5jb21wb25lbnQuc2NzcyJ9 */\"","import {Component, ElementRef, OnDestroy, OnInit, ViewChild} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {AuthenticationService} from '../../../shared/services/authentication.service';\nimport {first} from 'rxjs/internal/operators/first';\nimport * as moment from 'moment';\nimport {ToastrService} from 'ngx-toastr';\nimport {Title} from '@angular/platform-browser';\nimport {ValidateEmailNotTaken} from '../../../shared/validators/email-taken.validator';\nimport {CheckService} from '../../../shared/services/check.service';\nimport {ValidateUsernameNotTaken} from '../../../shared/validators/username-taken.validator';\nimport {environment} from '../../../../environments/environment';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  @ViewChild('registerFormName') registerFormName: ElementRef;\n  progress = false;\n  form: FormGroup;\n  routeSub: Subscription;\n  returnUrl: string = null;\n\n  constructor(\n    private titleService: Title,\n    private fb: FormBuilder,\n    private router: Router,\n    private route: ActivatedRoute,\n    private auth: AuthenticationService,\n    private toastr: ToastrService,\n    private check: CheckService\n  ) {\n    titleService.setTitle(environment.appName + ' :: ' + 'Register');\n    this.form = this.fb.group(\n      {\n        username: ['', {\n          validators: [Validators.required, Validators.minLength(5), Validators.maxLength(20)],\n          asyncValidators: [ValidateUsernameNotTaken.createValidator(this.check)],\n          updateOn: 'blur'\n        }],\n        email: ['', {\n          validators: [Validators.required, Validators.email],\n          asyncValidators: [ValidateEmailNotTaken.createValidator(this.check)],\n          updateOn: 'blur'\n        }],\n        passwordGroup: this.fb.group({\n            password: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(20)]],\n            confirmPassword: ['', Validators.required],\n          }, {\n            validator: (group: FormGroup) => {\n              const pass = group.controls.password.value;\n              const confirmPassword = group.controls.confirmPassword.value;\n              if (pass === confirmPassword) {\n                return null;\n              } else {\n                return {notSame: true};\n              }\n            }\n          }\n        ),\n        name: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(30)]],\n        surname: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(30)]],\n        remember: [false]\n      }\n    );\n  }\n\n  ngOnInit(): void {\n    this.registerFormName.nativeElement.focus();\n    this.routeSub = this.route.queryParams\n      .subscribe((params: any) => {\n        console.log('params', params);\n        this.returnUrl = params.returnUrl;\n      });\n  }\n\n  submit(data: any): void {\n    console.log(data);\n    this.form.markAsPristine();\n    this.progress = true;\n    this.auth.register({\n      username: data.username,\n      email: data.email,\n      password: data.passwordGroup.password,\n      name: data.name,\n      surname: data.surname,\n      birthday: moment().format('YYYY-MM-DD')\n    })\n      .pipe(first())\n      .subscribe((response: any) => {\n          console.log('response', response);\n          this.progress = false;\n          this.form.reset();\n          this.toastr.success('We are happy to have you!', 'Welcome aboard ' + response.user.profile.name + '!',\n            {\n              timeOut: 8000\n            });\n          if (this.returnUrl) {\n            this.router.navigate([this.returnUrl]);\n          } else {\n            this.router.navigate(['/']);\n          }\n        },\n        error => {\n          console.error('error', error);\n          this.progress = false;\n        });\n  }\n\n  ngOnDestroy(): void {\n    if (this.routeSub !== undefined) {\n      this.routeSub.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { RegisterRoutingModule } from './register-routing.module';\nimport {RegisterComponent} from './register.component';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {NgZorroAntdModule} from 'ng-zorro-antd';\nimport {AngularFontAwesomeModule} from 'angular-font-awesome';\n\n@NgModule({\n  declarations: [RegisterComponent],\n  imports: [\n    CommonModule,\n    RegisterRoutingModule,\n    NgZorroAntdModule,\n    ReactiveFormsModule,\n    AngularFontAwesomeModule\n  ]\n})\nexport class RegisterModule { }\n"],"sourceRoot":""}