{"version":3,"sources":["webpack:///./src/app/main/modules/provider-application-form/provider-application-form-routing.module.ts","webpack:///./src/app/main/modules/provider-application-form/provider-application-form.component.html","webpack:///./src/app/main/modules/provider-application-form/provider-application-form.component.scss","webpack:///./src/app/main/modules/provider-application-form/provider-application-form.component.ts","webpack:///./src/app/main/modules/provider-application-form/provider-application-form.module.ts"],"names":[],"mappings":"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","file":"modules-provider-application-form-provider-application-form-module.js","sourcesContent":["import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {ProviderApplicationFormComponent} from './provider-application-form.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ProviderApplicationFormComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ProviderApplicationFormRoutingModule {\n}\n","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"jumbotron\\\" style=\\\"margin-bottom: 1rem;\\\">\\n    <div class=\\\"login-form mx-auto d-block w-100\\\">\\n      <div class=\\\"page-header text-center\\\">\\n        <h1>Provider Application</h1>\\n        <h5> To be able to rent your property, you have to enter your company information</h5>\\n      </div>\\n\\n      <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"submit(form.value)\\\" class=\\\"form-validate\\\">\\n\\n        <fieldset class=\\\"scheduler-border\\\">\\n          <legend class=\\\"scheduler-border\\\">Company Owner Information:</legend>\\n          <div class=\\\"form-row\\\">\\n            <div class=\\\"col-md-4 mb-3\\\">\\n              <!--Name-->\\n              <div class=\\\"form-group\\\">\\n                <div class=\\\"control-label\\\">\\n                  <label id=\\\"name-lbl\\\" for=\\\"name\\\" class=\\\"required\\\">\\n                    Name\\n                    <span class=\\\"star\\\"> *</span></label>\\n                </div>\\n                <div class=\\\"controls\\\">\\n                  <input class=\\\"form-control\\\" id=\\\"name\\\" type=\\\"text\\\" formControlName=\\\"name\\\" #registerFormName\\n                         [ngClass]=\\\"{'is-invalid': (form.get('name').touched || form.get('name').dirty)\\n                    && !form.get('name').valid }\\\"/>\\n                  <span class=\\\"invalid-feedback\\\">\\n              <span *ngIf=\\\"(form.get('name').errors?.required &&\\n              form.get('name').touched)\\\">\\n                The name is required!\\n              </span>\\n              <span *ngIf=\\\"(form.get('name').errors?.minlength &&\\n               form.get('name').touched)\\\">\\n                Too short!\\n              </span>\\n              <span *ngIf=\\\"(form.get('name').errors?.maxlength &&\\n               form.get('name').touched)\\\">\\n                Too long!\\n              </span>\\n            </span>\\n                </div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"col-md-4 mb-3\\\">\\n              <!--Surname-->\\n              <div class=\\\"form-group\\\">\\n                <div class=\\\"control-label\\\">\\n                  <label id=\\\"surname-lbl\\\" for=\\\"surname\\\" class=\\\"required\\\">\\n                    Surname\\n                    <span class=\\\"star\\\"> *</span></label>\\n                </div>\\n                <div class=\\\"controls\\\">\\n                  <input class=\\\"form-control\\\" id=\\\"surname\\\" type=\\\"text\\\" formControlName=\\\"surname\\\"\\n                         [ngClass]=\\\"{'is-invalid': (form.get('surname').touched || form.get('surname').dirty) &&\\n                                         !form.get('surname').valid }\\\"/>\\n                  <span class=\\\"invalid-feedback\\\">\\n              <span *ngIf=\\\"(form.get('surname').errors?.required && form.get('surname').touched)\\\">\\n                The surname is required!\\n              </span>\\n              <span *ngIf=\\\"(form.get('surname').errors?.minlength && form.get('surname').touched)\\\">\\n                Too short!\\n              </span>\\n             <span *ngIf=\\\"(form.get('surname').errors?.maxlength && form.get('surname').touched)\\\">\\n                Too long!\\n              </span>\\n            </span>\\n                </div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"col-md-4 mb-3\\\">\\n              <!--Patronym-->\\n              <div class=\\\"form-group\\\">\\n                <div class=\\\"control-label\\\">\\n                  <label id=\\\"patronym-lbl\\\" for=\\\"name\\\" class=\\\"required\\\">\\n                    Patronym\\n                    <span class=\\\"star\\\"> *</span></label>\\n                </div>\\n                <div class=\\\"controls\\\">\\n                  <input class=\\\"form-control\\\" id=\\\"patronym\\\" type=\\\"text\\\" formControlName=\\\"patronym\\\"\\n                         [ngClass]=\\\"{'is-invalid': (form.get('patronym').touched || form.get('patronym').dirty)\\n                    && !form.get('name').valid }\\\"/>\\n                  <span class=\\\"invalid-feedback\\\">\\n              <span *ngIf=\\\"(form.get('patronym').errors?.required &&\\n              form.get('patronym').touched)\\\">\\n                The patronym is required!\\n              </span>\\n              <span *ngIf=\\\"(form.get('patronym').errors?.minlength &&\\n               form.get('patronym').touched)\\\">\\n                Too short!\\n              </span>\\n              <span *ngIf=\\\"(form.get('patronym').errors?.maxlength &&\\n               form.get('patronym').touched)\\\">\\n                Too long!\\n              </span>\\n            </span>\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n\\n          <!--Residence Address-->\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"control-label\\\">\\n              <label id=\\\"residence-address-lbl\\\" for=\\\"residence-address\\\" class=\\\"required\\\">\\n                Residence Address\\n                <span class=\\\"star\\\"> *</span></label>\\n            </div>\\n            <div class=\\\"controls\\\">\\n              <input class=\\\"form-control\\\" id=\\\"residence-address\\\" type=\\\"text\\\" formControlName=\\\"residence_address\\\"\\n                     [ngClass]=\\\"{'is-invalid': (form.get('residence_address').touched || form.get('residence_address').dirty) &&\\n                                         !form.get('residence_address').valid }\\\"/>\\n              <span class=\\\"invalid-feedback\\\">\\n              <span *ngIf=\\\"(form.get('residence_address').errors?.required && form.get('residence_address').touched)\\\">\\n                The residence address is required!\\n              </span>\\n              <span *ngIf=\\\"(form.get('residence_address').errors?.minlength && form.get('residence_address').touched)\\\">\\n                Too short!\\n              </span>\\n             <span *ngIf=\\\"(form.get('residence_address').errors?.maxlength && form.get('residence_address').touched)\\\">\\n                Too long!\\n              </span>\\n            </span>\\n            </div>\\n          </div>\\n        </fieldset>\\n\\n        <fieldset class=\\\"scheduler-border\\\">\\n          <legend class=\\\"scheduler-border\\\">Company Information:</legend>\\n\\n          <!--Company Name-->\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"control-label\\\">\\n              <label id=\\\"company-name-lbl\\\" for=\\\"company-name\\\" class=\\\"required\\\">\\n                Company Name\\n                <span class=\\\"star\\\"> *</span></label>\\n            </div>\\n            <div class=\\\"controls\\\">\\n              <input class=\\\"form-control\\\" id=\\\"company-name\\\" type=\\\"text\\\" formControlName=\\\"company_name\\\"\\n                     [ngClass]=\\\"{'is-invalid': (form.get('company_name').touched || form.get('company_name').dirty)\\n                    && !form.get('company_name').valid }\\\"/>\\n              <span class=\\\"invalid-feedback\\\">\\n              <span *ngIf=\\\"(form.get('company_name').errors?.required &&\\n              form.get('company_name').touched)\\\">\\n                The company name is required!\\n              </span>\\n              <span *ngIf=\\\"(form.get('company_name').errors?.minlength &&\\n               form.get('company_name').touched)\\\">\\n                Too short!\\n              </span>\\n              <span *ngIf=\\\"(form.get('company_name').errors?.maxlength &&\\n               form.get('company_name').touched)\\\">\\n                Too long!\\n              </span>\\n            </span>\\n            </div>\\n          </div>\\n\\n          <!--Company Address-->\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"control-label\\\">\\n              <label id=\\\"company-address-lbl\\\" for=\\\"company-address\\\" class=\\\"required\\\">\\n                Company Address\\n                <span class=\\\"star\\\"> *</span></label>\\n            </div>\\n            <div class=\\\"controls\\\">\\n              <input class=\\\"form-control\\\" id=\\\"company-address\\\" type=\\\"text\\\" formControlName=\\\"company_address\\\"\\n                     [ngClass]=\\\"{'is-invalid': (form.get('company_address').touched || form.get('company_address').dirty) &&\\n                                         !form.get('company_address').valid }\\\"/>\\n              <span class=\\\"invalid-feedback\\\">\\n              <span *ngIf=\\\"(form.get('company_address').errors?.required && form.get('company_address').touched)\\\">\\n                The company address is required!\\n              </span>\\n              <span *ngIf=\\\"(form.get('company_address').errors?.minlength && form.get('company_address').touched)\\\">\\n                Too short!\\n              </span>\\n             <span *ngIf=\\\"(form.get('company_address').errors?.maxlength && form.get('company_address').touched)\\\">\\n                Too long!\\n              </span>\\n            </span>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-row\\\">\\n\\n            <div class=\\\"col-md-6 mb-3\\\">\\n              <!--Tax Number-->\\n              <div class=\\\"form-group\\\">\\n                <div class=\\\"control-label\\\">\\n                  <label id=\\\"tax-number-lbl\\\" for=\\\"tax-number\\\" class=\\\"required\\\">\\n                    Tax Number\\n                    <span class=\\\"star\\\"> *</span></label>\\n                </div>\\n                <div class=\\\"controls\\\">\\n                  <input class=\\\"form-control\\\" id=\\\"tax-number\\\" type=\\\"text\\\" formControlName=\\\"tax_number\\\"\\n                         [ngClass]=\\\"{'is-invalid': (form.get('tax_number').touched || form.get('tax_number').dirty) &&\\n                                         !form.get('tax_number').valid }\\\"/>\\n                  <span class=\\\"invalid-feedback\\\">\\n              <span *ngIf=\\\"(form.get('tax_number').errors?.required && form.get('tax_number').touched)\\\">\\n                The company tax number is required!\\n              </span>\\n              <span *ngIf=\\\"(form.get('tax_number').errors?.minlength && form.get('tax_number').touched)\\\">\\n                Too short!\\n              </span>\\n             <span *ngIf=\\\"(form.get('tax_number').errors?.maxlength && form.get('tax_number').touched)\\\">\\n                Too long!\\n              </span>\\n            </span>\\n                </div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"col-md-6 mb-3\\\">\\n              <!--Tax Office-->\\n              <div class=\\\"form-group\\\">\\n                <div class=\\\"control-label\\\">\\n                  <label id=\\\"tax-office-lbl\\\" for=\\\"tax-office\\\" class=\\\"required\\\">\\n                    Tax Office\\n                    <span class=\\\"star\\\"> *</span></label>\\n                </div>\\n                <div class=\\\"controls\\\">\\n                  <input class=\\\"form-control\\\" id=\\\"tax-office\\\" type=\\\"text\\\" formControlName=\\\"tax_office\\\"\\n                         [ngClass]=\\\"{'is-invalid': (form.get('tax_office').touched || form.get('tax_office').dirty) &&\\n                                         !form.get('tax_office').valid }\\\"/>\\n                  <span class=\\\"invalid-feedback\\\">\\n              <span *ngIf=\\\"(form.get('tax_office').errors?.required && form.get('tax_office').touched)\\\">\\n                The company tax office is required!\\n              </span>\\n              <span *ngIf=\\\"(form.get('tax_office').errors?.minlength && form.get('tax_office').touched)\\\">\\n                Too short!\\n              </span>\\n             <span *ngIf=\\\"(form.get('tax_office').errors?.maxlength && form.get('tax_office').touched)\\\">\\n                Too long!\\n              </span>\\n            </span>\\n                </div>\\n              </div>\\n            </div>\\n\\n          </div>\\n          <div class=\\\"form-row\\\">\\n\\n            <div class=\\\"col-md-4 mb-3\\\">\\n              <!--Id Card Number-->\\n              <div class=\\\"form-group\\\">\\n                <div class=\\\"control-label\\\">\\n                  <label id=\\\"id-card-number-lbl\\\" for=\\\"id-card-number\\\" class=\\\"required\\\">\\n                    Id Card Number\\n                    <span class=\\\"star\\\"> *</span></label>\\n                </div>\\n                <div class=\\\"controls\\\">\\n                  <input class=\\\"form-control\\\" id=\\\"id-card-number\\\" type=\\\"text\\\" formControlName=\\\"id_card_number\\\"\\n                         [ngClass]=\\\"{'is-invalid': (form.get('id_card_number').touched || form.get('id_card_number').dirty) &&\\n                                         !form.get('id_card_number').valid }\\\"/>\\n                  <span class=\\\"invalid-feedback\\\">\\n              <span *ngIf=\\\"(form.get('id_card_number').errors?.required && form.get('id_card_number').touched)\\\">\\n                The id card number is required!\\n              </span>\\n              <span *ngIf=\\\"(form.get('id_card_number').errors?.minlength && form.get('id_card_number').touched)\\\">\\n                Too short!\\n              </span>\\n             <span *ngIf=\\\"(form.get('id_card_number').errors?.maxlength && form.get('id_card_number').touched)\\\">\\n                Too long!\\n              </span>\\n            </span>\\n                </div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"col-md-4 mb-3\\\">\\n              <!--Id Card Publishing Authority-->\\n              <div class=\\\"form-group\\\">\\n                <div class=\\\"control-label\\\">\\n                  <label id=\\\"id-card-publishing-authority-lbl\\\" for=\\\"id-card-publishing-authority\\\" class=\\\"required\\\">\\n                    Id Card Publishing Authority\\n                    <span class=\\\"star\\\"> *</span></label>\\n                </div>\\n                <div class=\\\"controls\\\">\\n                  <input class=\\\"form-control\\\" id=\\\"id-card-publishing-authority\\\" type=\\\"text\\\"\\n                         formControlName=\\\"id_card_publishing_authority\\\"\\n                         [ngClass]=\\\"{'is-invalid': (form.get('id_card_publishing_authority').touched || form.get('id_card_publishing_authority').dirty) &&\\n                                         !form.get('id_card_publishing_authority').valid }\\\"/>\\n                  <span class=\\\"invalid-feedback\\\">\\n              <span\\n                *ngIf=\\\"(form.get('id_card_publishing_authority').errors?.required && form.get('id_card_publishing_authority').touched)\\\">\\n                The id card publishing authority is required!\\n              </span>\\n              <span\\n                *ngIf=\\\"(form.get('id_card_publishing_authority').errors?.minlength && form.get('id_card_publishing_authority').touched)\\\">\\n                Too short!\\n              </span>\\n             <span\\n               *ngIf=\\\"(form.get('id_card_publishing_authority').errors?.maxlength && form.get('id_card_publishing_authority').touched)\\\">\\n                Too long!\\n              </span>\\n            </span>\\n                </div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"col-md-4 mb-3\\\">\\n              <!--Id Card Date of Issue-->\\n              <div class=\\\"form-group\\\">\\n                <div class=\\\"control-label\\\">\\n                  <label id=\\\"id-card-date-issue-lbl\\\" for=\\\"id-card-date-issue\\\" class=\\\"required\\\">\\n                    Id Card Date of Issue\\n                    <span class=\\\"star\\\"> *</span></label>\\n                </div>\\n                <div class=\\\"controls\\\">\\n                  <input class=\\\"form-control\\\" id=\\\"id-card-date-issue\\\" type=\\\"text\\\"\\n                         formControlName=\\\"id_card_date_of_issue\\\"\\n                         [ngClass]=\\\"{'is-invalid': (form.get('id_card_date_of_issue').touched || form.get('id_card_date_of_issue').dirty)\\n                    && !form.get('id_card_date_of_issue').valid }\\\"/>\\n                  <span class=\\\"invalid-feedback\\\">\\n              <span *ngIf=\\\"(form.get('id_card_date_of_issue').errors?.required &&\\n              form.get('id_card_date_of_issue').touched)\\\">\\n                The id card date of issue is required!\\n              </span>\\n              <span *ngIf=\\\"(form.get('id_card_date_of_issue').errors?.minlength &&\\n               form.get('id_card_date_of_issue').touched)\\\">\\n                Too short!\\n              </span>\\n              <span *ngIf=\\\"(form.get('id_card_date_of_issue').errors?.maxlength &&\\n               form.get('id_card_date_of_issue').touched)\\\">\\n                Too long!\\n              </span>\\n            </span>\\n                </div>\\n              </div>\\n            </div>\\n\\n          </div>\\n        </fieldset>\\n\\n        <!--Submit-->\\n        <div class=\\\"d-flex justify-content-end\\\">\\n          <div class=\\\"form-group d-flex justify-content-start\\\">\\n            <div class=\\\"controls\\\">\\n              <button\\n                [disabled]=\\\"!form.valid || progress || form.untouched\\\"\\n                type=\\\"submit\\\"\\n                class=\\\"btn btn-primary\\\">\\n                Apply\\n                <fa *ngIf=\\\"progress\\\" name=\\\"cog\\\" animation=\\\"spin\\\"></fa>\\n                <fa *ngIf=\\\"!progress\\\" name=\\\"sign-in\\\"></fa>\\n              </button>\\n            </div>\\n          </div>\\n        </div>\\n      </form>\\n    </div>\\n  </div>\\n</div>\\n\"","module.exports = \"fieldset.scheduler-border {\\n  border: 1px groove #ddd !important;\\n  padding: 0 1.4em 1.4em 1.4em !important;\\n  margin: 0 0 1.5em 0 !important;\\n  box-shadow: 0px 0px 0px 0px #000; }\\n\\nlegend.scheduler-border {\\n  font-size: 1.2em !important;\\n  font-weight: bold !important;\\n  text-align: left !important;\\n  width: auto;\\n  padding: 0 10px;\\n  border-bottom: none; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL21zaS9wcm9qZWN0cy9XZWJzdG9ybVByb2plY3RzL3JlbnQtd2ViLWFwcC9zcmMvYXBwL21haW4vbW9kdWxlcy9wcm92aWRlci1hcHBsaWNhdGlvbi1mb3JtL3Byb3ZpZGVyLWFwcGxpY2F0aW9uLWZvcm0uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQ0FBa0M7RUFDbEMsdUNBQXVDO0VBQ3ZDLDhCQUE4QjtFQUU5QixnQ0FBaUMsRUFBQTs7QUFHbkM7RUFDRSwyQkFBMkI7RUFDM0IsNEJBQTRCO0VBQzVCLDJCQUEyQjtFQUMzQixXQUFVO0VBQ1YsZUFBYztFQUNkLG1CQUFrQixFQUFBIiwiZmlsZSI6InNyYy9hcHAvbWFpbi9tb2R1bGVzL3Byb3ZpZGVyLWFwcGxpY2F0aW9uLWZvcm0vcHJvdmlkZXItYXBwbGljYXRpb24tZm9ybS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImZpZWxkc2V0LnNjaGVkdWxlci1ib3JkZXIge1xuICBib3JkZXI6IDFweCBncm9vdmUgI2RkZCAhaW1wb3J0YW50O1xuICBwYWRkaW5nOiAwIDEuNGVtIDEuNGVtIDEuNGVtICFpbXBvcnRhbnQ7XG4gIG1hcmdpbjogMCAwIDEuNWVtIDAgIWltcG9ydGFudDtcbiAgLXdlYmtpdC1ib3gtc2hhZG93OiAgMHB4IDBweCAwcHggMHB4ICMwMDA7XG4gIGJveC1zaGFkb3c6ICAwcHggMHB4IDBweCAwcHggIzAwMDtcbn1cblxubGVnZW5kLnNjaGVkdWxlci1ib3JkZXIge1xuICBmb250LXNpemU6IDEuMmVtICFpbXBvcnRhbnQ7XG4gIGZvbnQtd2VpZ2h0OiBib2xkICFpbXBvcnRhbnQ7XG4gIHRleHQtYWxpZ246IGxlZnQgIWltcG9ydGFudDtcbiAgd2lkdGg6YXV0bztcbiAgcGFkZGluZzowIDEwcHg7XG4gIGJvcmRlci1ib3R0b206bm9uZTtcbn1cbiJdfQ== */\"","import {Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {AuthenticationService} from '../../../shared/services/authentication.service';\nimport {ToastrService} from 'ngx-toastr';\nimport {Title} from '@angular/platform-browser';\nimport {environment} from '../../../../environments/environment';\n\n@Component({\n  selector: 'app-provider-application-form',\n  templateUrl: './provider-application-form.component.html',\n  styleUrls: ['./provider-application-form.component.scss']\n})\nexport class ProviderApplicationFormComponent implements OnInit {\n  @ViewChild('registerFormName') registerFormName: ElementRef;\n  progress = false;\n  form: FormGroup;\n  returnUrl: string = null;\n\n  constructor(\n    private titleService: Title,\n    private fb: FormBuilder,\n    private router: Router,\n    private route: ActivatedRoute,\n    private auth: AuthenticationService,\n    private toastr: ToastrService\n  ) {\n    titleService.setTitle(environment.appName + ' :: ' + 'Provider Application');\n    this.form = this.fb.group(\n      {\n        company_name: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(30)]],\n        name: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(30)]],\n        surname: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(30)]],\n        patronym: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(30)]],\n        company_address: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(30)]],\n        tax_number: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(30)]],\n        tax_office: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(30)]],\n        id_card_number: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(30)]],\n        id_card_publishing_authority: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(30)]],\n        id_card_date_of_issue: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(30)]],\n        residence_address: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(30)]]\n      }\n    );\n  }\n\n  ngOnInit(): void {\n    this.registerFormName.nativeElement.focus();\n  }\n\n  submit(data: any): void {\n    console.log(data);\n    this.form.markAsPristine();\n    this.progress = true;\n    // Todo: request for provider to API\n    sessionStorage.setItem('pending_provider', null);\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {ProviderApplicationFormRoutingModule} from './provider-application-form-routing.module';\nimport {ProviderApplicationFormComponent} from './provider-application-form.component';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {AngularFontAwesomeModule} from 'angular-font-awesome';\n\n@NgModule({\n  declarations: [ProviderApplicationFormComponent],\n  imports: [\n    CommonModule,\n    ProviderApplicationFormRoutingModule,\n    ReactiveFormsModule,\n    AngularFontAwesomeModule\n  ]\n})\nexport class ProviderApplicationFormModule {\n}\n"],"sourceRoot":""}